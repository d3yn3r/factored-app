[{"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\index.js":"1","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\App.jsx":"2","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\context\\UserContext.jsx":"3","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\Authentication.jsx":"4","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\ErrorMessage.jsx":"5","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\SkillModal.jsx":"6","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\services\\Login.service.js":"7","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\login\\LoginComponent.jsx":"8","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\login\\RegisterComponent.jsx":"9","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\services\\Session.service.js":"10","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\profile\\Profile.jsx":"11","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\services\\User.service.js":"12","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\shared\\NavBarComponent.jsx":"13"},{"size":389,"mtime":1680271847000,"results":"14","hashOfConfig":"15"},{"size":583,"mtime":1699623850138,"results":"16","hashOfConfig":"15"},{"size":1188,"mtime":1699639376760,"results":"17","hashOfConfig":"15"},{"size":5787,"mtime":1699617078726,"results":"18","hashOfConfig":"15"},{"size":206,"mtime":1680271847000,"results":"19","hashOfConfig":"15"},{"size":5065,"mtime":1699639311685,"results":"20","hashOfConfig":"15"},{"size":1208,"mtime":1699639484590,"results":"21","hashOfConfig":"15"},{"size":2946,"mtime":1699634165165,"results":"22","hashOfConfig":"15"},{"size":4573,"mtime":1699634269204,"results":"23","hashOfConfig":"15"},{"size":273,"mtime":1699626906776,"results":"24","hashOfConfig":"15"},{"size":6984,"mtime":1699634217578,"results":"25","hashOfConfig":"15"},{"size":1246,"mtime":1699639475488,"results":"26","hashOfConfig":"15"},{"size":832,"mtime":1699627091903,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1q9oyts",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\index.js",[],[],["70","71","72","73","74","75"],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\App.jsx",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\context\\UserContext.jsx",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\Authentication.jsx",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\ErrorMessage.jsx",[],[],["76","77","78","79","80","81"],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\SkillModal.jsx",["82"],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\services\\Login.service.js",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\login\\LoginComponent.jsx",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\login\\RegisterComponent.jsx",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\services\\Session.service.js",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\profile\\Profile.jsx",["83"],[],"import React, {useEffect, useState} from \"react\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport SkillModal from \"../SkillModal\";\n// for creating the radar chart\nimport {\n    Chart as ChartJS,\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Radar } from 'react-chartjs-2';\nimport { GetUser, GetUserSkills } from \"../../services/User.service\";\nimport NavBarComponent from \"../shared/NavBarComponent\";\n\n  ChartJS.register(\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n  );\n\nconst initialState = {\n    user: null,\n    skills:[],\n    errorMessage:\"\",\n    loaded: false,\n    activeModal:false,\n    id: null,\n    sprite:\"bottts\",\n    seed:1000\n\n}\n\nconst Profile = () => {\n    const [state, setState] = new useState(initialState);\n    const avatarTypes = [\"avataaars\", \"human\", \"bottts\", \"jdenticon\", \"identicon\", \"gridy\", \"micah\"];\n    // Function to set the current sprite type\n    const handleSprite = async () => {\n        const pos = Math.floor(Math.random() * avatarTypes.length);\n        setState((prevState) => ({...prevState, sprite: avatarTypes[pos]}));\n    };\n\n    // Function to generate random seeds for the API\n    const handleGenerate = async () => {\n        let x = Math.floor(Math.random() * 1000);\n        setState((prevState) => ({...prevState, seed:x}));\n    };\n\n    // function to trigger the update to happen\n    const handleUpdateSkill = async (id) => {\n        setState((prevState) => ({...prevState, activeModal: true,id}));\n    };\n\n    // function to get the skills\n    const getSkills = async () => {\n        const result = await GetUserSkills()\n        if(result != null){\n            setState((prevState) => ({...prevState, skills: result}))\n        }\n        else{\n            console.log(\"error getskills\",result)\n        }\n    };\n\n    const getUser = async() =>{\n        const result = await GetUser()\n        if(result != null){\n            setState((prevState) => ({...prevState, user: result}))\n        }\n        else{\n            console.log(\"error getuser\",result)\n        }\n    };\n    // use the function\n    useEffect(() => {\n        getUser();\n        getSkills();\n        handleSprite();\n        handleGenerate();\n    }, []);\n\n    // everytime the modal is used it refreshes the skills that are there\n    const handleModal = () => {\n        setState((prevState) => ({...prevState, activeModal: !prevState.activeModal,id:null}))\n        getSkills();\n    }\n\n    // skills data to make the radar chart\n    const dataRadar = {\n        labels: JSON.parse(JSON.stringify(state.skills)).map((skill) => skill.name),\n        datasets: [\n            {\n                label: 'Skills',\n                data: JSON.parse(JSON.stringify(state.skills)).map((skill) => skill.level), \n                backgroundColor: 'rgba(63, 209, 187, 0.2)',\n                borderColor: 'rgb(4, 181, 160)',\n                borderWidth: 1,\n            },\n        ],\n    };\n    \n    // if the skills are loaded and if they exist then display the table with the skills\n    return (\n        <>\n            <SkillModal active={state.activeModal}\n                        handleModal={handleModal}\n                        id={state.id}\n                        setErrorMessage={(value) => {setState((prevState) => ({...prevState, errorMessage: value}))}}/>\n            <div className='card equal-height'>\n                <NavBarComponent title={\"User Profile\"}/>\n                {state.user &&\n                    <div className=\"card-content is-flex\">\n                        <div className=\"media\">\n                            <div className=\"media-left\">\n                                <figure className=\"image is-128x128 is-inline-block\">\n                                    <img className=\"is-rounded m-5\"\n                                         src={`https://avatars.dicebear.com/api/${state.sprite}/${state.seed}.svg`}\n                                         alt=\"Sprite\"/>\n                                </figure>\n                            </div>\n                            <div className=\"media-content m-5\">\n                                <section className=\"section\">\n                                    <p className=\"title\">Name: {state.user.name}</p>\n                                    <p className=\"subtitle mt-2\">Email: {state.user.email}</p>\n                                    <p className=\"subtitle\">Company position: {state.user.company_position}</p>\n                                </section>\n                                <section className=\"section\">\n                                    <p className=\"title\">{state.user.name}'s skills:</p>\n                                    {state.skills ? (\n                                        <table className=\"table is-fullwidth\">\n                                            <thead>\n                                            <tr>\n                                                <th>Id</th>\n                                                <th>Name</th>\n                                                <th>Level</th>\n                                                <th>Actions</th>\n                                            </tr>\n                                            </thead>\n                                            <tbody>\n                                            {state.skills.map((skill) => (\n                                                <tr key={skill.id}>\n                                                    <td>{skill.id}</td>\n                                                    <td>{skill.name}</td>\n                                                    <td>{skill.level}</td>\n                                                    <td>\n                                                        <button className=\"button mr-2 is-info is-light\"\n                                                                onClick={() => handleUpdateSkill(skill.id)}>Update\n                                                        </button>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                            </tbody>\n                                            <button className=\"button m-5 is-primary\" onClick={() => setState((prevState) => ({...prevState, activeModal: true}))}>Create skill</button>\n                                        </table>\n                                    ) : <p>Loading</p>}\n                                    \n                                    <ErrorMessage message={state.errorMessage}/>\n\n                                    <Radar data={dataRadar}/>\n                                </section>\n                                \n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        </>\n    );\n};\n\nexport default Profile;\n","C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\services\\User.service.js",[],[],"C:\\Users\\deine\\Desktop\\Login\\frontend\\src\\components\\shared\\NavBarComponent.jsx",[],[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"84","replacedBy":"96"},{"ruleId":"86","replacedBy":"97"},{"ruleId":"88","replacedBy":"98"},{"ruleId":"90","replacedBy":"99"},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":44,"column":8,"nodeType":"104","endLine":44,"endColumn":19,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":85,"column":8,"nodeType":"104","endLine":85,"endColumn":10,"suggestions":"107"},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["108"],"no-whitespace-before-property",[],"rest-spread-spacing",[],[],[],[],["108"],[],[],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setErrorMessage'. Either include it or remove the dependency array. If 'setErrorMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["109"],"React Hook useEffect has missing dependencies: 'getSkills', 'getUser', 'handleGenerate', and 'handleSprite'. Either include them or remove the dependency array.",["110"],"no-object-constructor",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [id, setErrorMessage, token]",{"range":"115","text":"116"},"Update the dependencies array to be: [getSkills, getUser, handleGenerate, handleSprite]",{"range":"117","text":"118"},[1309,1320],"[id, setErrorMessage, token]",[2287,2289],"[getSkills, getUser, handleGenerate, handleSprite]"]